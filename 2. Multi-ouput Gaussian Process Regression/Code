{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "from datetime import datetime\n",
    "import gc\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "random_seed=2022\n",
    "torch.manual_seed(random_seed)\n",
    "random.seed(random_seed)\n",
    "np.random.seed(random_seed)\n",
    "torch.cuda.manual_seed(random_seed)\n",
    "\n",
    "device = torch.device(\"cpu\")\n",
    "# device = torch.device(\"cuda\")\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# CV\n",
    "from sklearn.model_selection import ParameterGrid # creates a parameter grid to search for\n",
    "from sklearn.model_selection import KFold # splits data into k-fold train and valid set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## split data\n",
    "- 'first 21 columns are input variables and last 7 columns are output variables'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train set:  torch.Size([31587, 21]) torch.Size([31587, 7])\n",
      "valid set:  torch.Size([7897, 21]) torch.Size([7897, 7])\n",
      "test set:  torch.Size([5000, 21]) torch.Size([5000, 7])\n"
     ]
    }
   ],
   "source": [
    "train_data = pd.read_csv('./data/SARCOSTst.csv', header=None)\n",
    "test_data = pd.read_csv('./data/SARCOSTrn.csv', header=None)\n",
    "\n",
    "X_train, X_valid, Y_train, Y_valid = train_test_split(train_data.iloc[:,:21], train_data.iloc[:,-7:], test_size=0.2)\n",
    "X_test, Y_test = test_data.iloc[:, :21], test_data.iloc[:, -7:]\n",
    "\n",
    "X_train = torch.tensor(X_train.values).to(device)\n",
    "Y_train = torch.tensor(Y_train.values).to(device)\n",
    "X_valid = torch.tensor(X_valid.values).to(device)\n",
    "Y_valid = torch.tensor(Y_valid.values).to(device)\n",
    "X_test = torch.tensor(X_test.values).to(device)\n",
    "Y_test = torch.tensor(Y_test.values).to(device)\n",
    "\n",
    "print('train set: ', X_train.shape, Y_train.shape)\n",
    "print('valid set: ', X_valid.shape, Y_valid.shape)\n",
    "print('test set: ', X_test.shape, Y_test.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinearKernel:\n",
    "    \"\"\"\n",
    "    standard dot product kernel k(a,b) = a^\\top b\n",
    "    :input: X1 (N*D), X2 (M*D)\n",
    "    :output: covariance matrix (N*M)\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def __call__(self, X1, X2):\n",
    "        # return torch.tensor([[torch.dot(x1, x2) for x1 in X1] for x2 in X2]) \n",
    "        return X1 @ X2.T\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GaussianKernel:\n",
    "    \"\"\"\n",
    "    isotropic Gaussian kernel\n",
    "    :input: X1 (N*D), X2 (M*D)\n",
    "    :output: covariance matrix (N*M)\n",
    "    \"\"\"\n",
    "    def __init__(self, sigma_k):\n",
    "        self.sigma_k = sigma_k # isotropic Gaussian kernel variance \n",
    "\n",
    "    def __call__(self, X1, X2):\n",
    "        # return np.exp(-(np.sum(X1**2, axis=1).values.reshape(-1, 1) +\n",
    "        #                 np.sum(X2**2, axis=1).values.reshape(1, -1) - 2*X1@X2.T) / pow(self.sigma_k, 2))\n",
    "        return torch.exp(-(torch.sum(X1**2, axis=1).reshape(-1, 1) +\n",
    "                           torch.sum(X2**2, axis=1).reshape(1, -1) - 2*X1@X2.T) / pow(self.sigma_k, 2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SigmoidKernel:\n",
    "    \"\"\"\n",
    "    hyperbolic tangent kernel\n",
    "    :input: X1 (N*D), X2 (M*D)\n",
    "    :output: covariance matrix (N*M)\n",
    "    \"\"\"\n",
    "    def __init__(self, alpha):\n",
    "        self.alpha = alpha \n",
    "    \n",
    "    def __call__(self, X1, X2):\n",
    "        return torch.tanh(self.alpha * X1 @ X2.T)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. GP regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## full model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GP_Regression(nn.Module):\n",
    "    def __init__(self, K, sigma_n, device):\n",
    "        super().__init__()\n",
    "        self.K = K\n",
    "        self.sigma_n = nn.Parameter(torch.tensor(sigma_n), requires_grad=True)  # noise variance (Hyperparameter)\n",
    "        self.device = device\n",
    "        self.Sigma = torch.diag(torch.ones(7)) * self.sigma_n # output dim (=7)\n",
    "    \n",
    "    def fit(self, X_train, Y_train, X_test):\n",
    "        self.X_train = X_train\n",
    "        self.Y_train = Y_train\n",
    "        self.X_test = X_test\n",
    "        self.N = X_train.shape[0]\n",
    "        self.M = X_test.shape[0]\n",
    "        self.D = Y_train.shape[1] # output dim (=7)\n",
    "        self.I = torch.eye(self.N)\n",
    "        # sufficient statistics\n",
    "        self.K_X_X = self.K(self.X_train, self.X_train)\n",
    "        self.K_X_X = torch.block_diag(*[self.K_X_X]*self.D) # coregionalisation matrix (C) is an identity matrix with DxD\n",
    "        self.K_Xt_X = self.K(self.X_test, self.X_train)\n",
    "        self.K_Xt_X = torch.block_diag(*[self.K_Xt_X]*self.D)\n",
    "        self.K_X_Xt = self.K_Xt_X.T\n",
    "        self.K_Xt_Xt = self.K(self.X_test, self.X_test)\n",
    "        self.K_Xt_Xt = torch.block_diag(*[self.K_Xt_Xt]*self.D)\n",
    "        self.vec_Y = self.Y_train.T.reshape(self.D*self.N) # Y concat\n",
    "\n",
    "    def predict(self):\n",
    "        # calculate predictive mean\n",
    "        mean = self.K_Xt_X @ torch.linalg.inv( self.K_X_X + torch.kron(self.Sigma, self.I).to(self.device) ) @ self.vec_Y\n",
    "        return mean.reshape(self.D, -1).T # to compare with Y_test\n",
    "\n",
    "    def __NLL_term_1__(self):\n",
    "        return -0.5*(self.M*self.D) * torch.log(torch.tensor([2*torch.pi]))\n",
    "\n",
    "    def __NLL_term_2__(self, CR): # Omega <- I\n",
    "        Sigma = torch.diag(torch.ones(self.D)) * self.sigma_n\n",
    "        SI = torch.kron(Sigma, self.I).to(self.device) \n",
    "        K = CR + SI\n",
    "        return -0.5 * torch.log(torch.det(K))\n",
    "\n",
    "    def __NLL_term_3__(self, CR): # Omega <- I\n",
    "        Sigma = torch.diag(torch.ones(self.D)) * self.sigma_n\n",
    "        SI = torch.kron(Sigma, self.I).to(self.device)\n",
    "        K = CR + SI\n",
    "        vec_Y = self.Y_train.T.reshape(self.D*self.N)  # Y concat\n",
    "        return -0.5 * vec_Y.T @ torch.linalg.inv(K) @ vec_Y\n",
    "    \n",
    "    def calculate_NLL(self):\n",
    "        K_X_X = self.K(self.X_train, self.X_train)\n",
    "        CR = torch.block_diag(*[K_X_X]*self.D) \n",
    "        return self.__NLL_term_1__().to(self.device) + self.__NLL_term_2__(CR).to(self.device) + self.__NLL_term_3__(CR).to(self.device)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SOR approximation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GP_Regression_SOR(nn.Module):\n",
    "    def __init__(self, K, sigma_n, device, B):\n",
    "        super().__init__()\n",
    "        self.K = K\n",
    "        self.sigma_n = sigma_n  # noise variance (Hyperparameter)\n",
    "        self.device = device\n",
    "        self.Sigma = torch.diag(torch.ones(7)) * self.sigma_n # output dim (=7)\n",
    "        self.B = B # random sample portion (e.g., B=0.1 means 10% of data)\n",
    "    \n",
    "    def fit(self, X_train, Y_train, X_test):\n",
    "        self.X_train = X_train\n",
    "        self.Y_train = Y_train\n",
    "        self.X_test = X_test\n",
    "        self.N = X_train.shape[0]\n",
    "        self.M = X_test.shape[0]\n",
    "        self.D = Y_train.shape[1] # output dim (=7)\n",
    "        self.I = torch.eye(self.N)\n",
    "        self.B_train = X_train[torch.randperm(self.N)[:int(self.N*self.B)]]#.to(self.device)\n",
    "        # sufficient statistics\n",
    "        self.K_Xt_B = self.K(self.X_test, self.B_train)\n",
    "        self.K_B_X = self.K(self.B_train, self.X_train)\n",
    "        self.K_X_B = self.K_B_X.T\n",
    "        self.K_B_B = self.K(self.B_train, self.B_train)\n",
    "        self.vec_Y = self.Y_train.T.reshape(self.D*self.N) # Y concat\n",
    "\n",
    "    def predict(self):\n",
    "        # calculate predictive mean\n",
    "        term_1 = torch.block_diag(*[self.K_Xt_B]*self.D)\n",
    "        # term_2 = torch.linalg.inv(\n",
    "        #     torch.block_diag(*[self.K_B_X @ self.K_X_B]*self.D) + torch.kron(self.Sigma, self.K_B_B).to(self.device)\n",
    "        # )\n",
    "        term_2 = torch.linalg.inv(\n",
    "            torch.kron(torch.diag(torch.ones(self.D)), self.K_B_X@self.K_X_B) + torch.kron(self.Sigma, self.K_B_B)\n",
    "        )\n",
    "        term_3 = torch.block_diag(*[self.K_B_X]*self.D) @ self.vec_Y\n",
    "        mean = term_1 @ term_2 @ term_3 \n",
    "        return mean.reshape(self.D, -1).T # to compare with Y_test\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HPO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'sigma_n': 0.05},\n",
       " {'sigma_n': 0.1},\n",
       " {'sigma_n': 1},\n",
       " {'sigma_n': 5},\n",
       " {'sigma_n': 10}]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid = {'sigma_n': [0.05, 0.1, 1, 5, 10]}\n",
    "grid_list = list(ParameterGrid(grid))\n",
    "grid_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'sigma_n': 0.05}\n",
      "Runtime::  373195\n",
      "MSE loss:  13070863.921733147\n",
      "\n",
      "{'sigma_n': 0.1}\n",
      "Runtime::  673963\n",
      "MSE loss:  11031468.943707984\n",
      "\n",
      "{'sigma_n': 1}\n",
      "Runtime::  310300\n",
      "MSE loss:  60396.19706776355\n",
      "\n",
      "{'sigma_n': 5}\n",
      "Runtime::  553296\n",
      "MSE loss:  288277964.1572634\n",
      "\n",
      "{'sigma_n': 10}\n",
      "Runtime::  895313\n",
      "MSE loss:  186614.25133434022\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for case in grid_list:\n",
    "\n",
    "    model = GP_Regression_SOR(K=LinearKernel(), sigma_n=case['sigma_n'], device=device, B=0.1)\n",
    "    start_time = datetime.now()\n",
    "    model.fit(X_train, Y_train, X_valid)\n",
    "    pred = model.predict()\n",
    "    runtime = datetime.now() - start_time\n",
    "    mse = nn.MSELoss()(pred, Y_valid).item()\n",
    "    \n",
    "    print(case)\n",
    "    print('Runtime:: ', runtime.microseconds)\n",
    "    print('MSE loss: ', mse)\n",
    "    print('')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gaussian kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'sigma_k': 0.05, 'sigma_n': 0.05},\n",
       " {'sigma_k': 0.05, 'sigma_n': 0.1},\n",
       " {'sigma_k': 0.05, 'sigma_n': 1},\n",
       " {'sigma_k': 0.05, 'sigma_n': 5},\n",
       " {'sigma_k': 0.05, 'sigma_n': 10},\n",
       " {'sigma_k': 1, 'sigma_n': 0.05},\n",
       " {'sigma_k': 1, 'sigma_n': 0.1},\n",
       " {'sigma_k': 1, 'sigma_n': 1},\n",
       " {'sigma_k': 1, 'sigma_n': 5},\n",
       " {'sigma_k': 1, 'sigma_n': 10},\n",
       " {'sigma_k': 5, 'sigma_n': 0.05},\n",
       " {'sigma_k': 5, 'sigma_n': 0.1},\n",
       " {'sigma_k': 5, 'sigma_n': 1},\n",
       " {'sigma_k': 5, 'sigma_n': 5},\n",
       " {'sigma_k': 5, 'sigma_n': 10}]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid = {'sigma_n': [0.05, 0.1, 1, 5, 10],\n",
    "        'sigma_k': [0.05, 1, 5]}\n",
    "grid_list = list(ParameterGrid(grid))\n",
    "grid_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'sigma_k': 0.05, 'sigma_n': 0.05}\n",
      "Runtime::  468432\n",
      "MSE loss:  370.29676771590914\n",
      "\n",
      "{'sigma_k': 0.05, 'sigma_n': 0.1}\n",
      "Runtime::  492986\n",
      "MSE loss:  370.2902607821131\n",
      "\n",
      "{'sigma_k': 0.05, 'sigma_n': 1}\n",
      "Runtime::  431557\n",
      "MSE loss:  370.30331449513926\n",
      "\n",
      "{'sigma_k': 0.05, 'sigma_n': 5}\n",
      "Runtime::  177430\n",
      "MSE loss:  370.3037464935128\n",
      "\n",
      "{'sigma_k': 0.05, 'sigma_n': 10}\n",
      "Runtime::  759776\n",
      "MSE loss:  370.30438430355167\n",
      "\n",
      "{'sigma_k': 1, 'sigma_n': 0.05}\n",
      "Runtime::  293153\n",
      "MSE loss:  334.6903720216562\n",
      "\n",
      "{'sigma_k': 1, 'sigma_n': 0.1}\n",
      "Runtime::  440249\n",
      "MSE loss:  333.85565516628054\n",
      "\n",
      "{'sigma_k': 1, 'sigma_n': 1}\n",
      "Runtime::  553447\n",
      "MSE loss:  339.0428044240789\n",
      "\n",
      "{'sigma_k': 1, 'sigma_n': 5}\n",
      "Runtime::  485533\n",
      "MSE loss:  344.94637048958043\n",
      "\n",
      "{'sigma_k': 1, 'sigma_n': 10}\n",
      "Runtime::  879994\n",
      "MSE loss:  347.4973410538941\n",
      "\n",
      "{'sigma_k': 5, 'sigma_n': 0.05}\n",
      "Runtime::  318610\n",
      "MSE loss:  64.21554775274137\n",
      "\n",
      "{'sigma_k': 5, 'sigma_n': 0.1}\n",
      "Runtime::  196211\n",
      "MSE loss:  65.52412661938861\n",
      "\n",
      "{'sigma_k': 5, 'sigma_n': 1}\n",
      "Runtime::  821603\n",
      "MSE loss:  73.35677162484946\n",
      "\n",
      "{'sigma_k': 5, 'sigma_n': 5}\n",
      "Runtime::  797869\n",
      "MSE loss:  93.60203357607224\n",
      "\n",
      "{'sigma_k': 5, 'sigma_n': 10}\n",
      "Runtime::  492172\n",
      "MSE loss:  112.09967674038606\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for case in grid_list:\n",
    "\n",
    "    model = GP_Regression_SOR(K=GaussianKernel(sigma_k=case['sigma_k']), sigma_n=case['sigma_n'], device=device, B=0.1)\n",
    "    start_time = datetime.now()\n",
    "    model.fit(X_train, Y_train, X_valid)\n",
    "    pred = model.predict()\n",
    "    runtime = datetime.now() - start_time\n",
    "    mse = nn.MSELoss()(pred, Y_valid).item()\n",
    "    \n",
    "    print(case)\n",
    "    print('Runtime:: ', runtime.microseconds)\n",
    "    print('MSE loss: ', mse)\n",
    "    print('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sigmoid kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'alpha': 0.05, 'sigma_n': 0.05},\n",
       " {'alpha': 0.05, 'sigma_n': 0.1},\n",
       " {'alpha': 0.05, 'sigma_n': 1},\n",
       " {'alpha': 0.05, 'sigma_n': 5},\n",
       " {'alpha': 0.05, 'sigma_n': 10},\n",
       " {'alpha': 1, 'sigma_n': 0.05},\n",
       " {'alpha': 1, 'sigma_n': 0.1},\n",
       " {'alpha': 1, 'sigma_n': 1},\n",
       " {'alpha': 1, 'sigma_n': 5},\n",
       " {'alpha': 1, 'sigma_n': 10},\n",
       " {'alpha': 5, 'sigma_n': 0.05},\n",
       " {'alpha': 5, 'sigma_n': 0.1},\n",
       " {'alpha': 5, 'sigma_n': 1},\n",
       " {'alpha': 5, 'sigma_n': 5},\n",
       " {'alpha': 5, 'sigma_n': 10}]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid = {'sigma_n': [0.05, 0.1, 1, 5, 10],\n",
    "        'alpha': [0.05, 1, 5]}\n",
    "grid_list = list(ParameterGrid(grid))\n",
    "grid_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.05, 'sigma_n': 0.05}\n",
      "Runtime::  861084\n",
      "MSE loss:  8.259437873146231\n",
      "\n",
      "{'alpha': 0.05, 'sigma_n': 0.1}\n",
      "Runtime::  954705\n",
      "MSE loss:  7.292323144034025\n",
      "\n",
      "{'alpha': 0.05, 'sigma_n': 1}\n",
      "Runtime::  227890\n",
      "MSE loss:  7.260592703719794\n",
      "\n",
      "{'alpha': 0.05, 'sigma_n': 5}\n",
      "Runtime::  271570\n",
      "MSE loss:  10.048423248229945\n",
      "\n",
      "{'alpha': 0.05, 'sigma_n': 10}\n",
      "Runtime::  775042\n",
      "MSE loss:  116.71605128861682\n",
      "\n",
      "{'alpha': 1, 'sigma_n': 0.05}\n",
      "Runtime::  964304\n",
      "MSE loss:  26.81745081897477\n",
      "\n",
      "{'alpha': 1, 'sigma_n': 0.1}\n",
      "Runtime::  149503\n",
      "MSE loss:  36.594688592294084\n",
      "\n",
      "{'alpha': 1, 'sigma_n': 1}\n",
      "Runtime::  240528\n",
      "MSE loss:  32.434234757676535\n",
      "\n",
      "{'alpha': 1, 'sigma_n': 5}\n",
      "Runtime::  919076\n",
      "MSE loss:  32.37575823305953\n",
      "\n",
      "{'alpha': 1, 'sigma_n': 10}\n",
      "Runtime::  872059\n",
      "MSE loss:  37.32291690285767\n",
      "\n",
      "{'alpha': 5, 'sigma_n': 0.05}\n",
      "Runtime::  17034\n",
      "MSE loss:  34.774999357897315\n",
      "\n",
      "{'alpha': 5, 'sigma_n': 0.1}\n",
      "Runtime::  819889\n",
      "MSE loss:  32.8562655970894\n",
      "\n",
      "{'alpha': 5, 'sigma_n': 1}\n",
      "Runtime::  965240\n",
      "MSE loss:  41.35945000538567\n",
      "\n",
      "{'alpha': 5, 'sigma_n': 5}\n",
      "Runtime::  19321\n",
      "MSE loss:  41.213961515935445\n",
      "\n",
      "{'alpha': 5, 'sigma_n': 10}\n",
      "Runtime::  168143\n",
      "MSE loss:  34.75558085389525\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for case in grid_list:\n",
    "\n",
    "    model = GP_Regression_SOR(K=SigmoidKernel(alpha=case['alpha']), sigma_n=case['sigma_n'], device=device, B=0.1)\n",
    "    start_time = datetime.now()\n",
    "    model.fit(X_train, Y_train, X_valid)\n",
    "    pred = model.predict()\n",
    "    runtime = datetime.now() - start_time\n",
    "    mse = nn.MSELoss()(pred, Y_valid).item()\n",
    "    \n",
    "    print(case)\n",
    "    print('Runtime:: ', runtime.microseconds)\n",
    "    print('MSE loss: ', mse)\n",
    "    print('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Other regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Runtime:  43172\n",
      "MSE loss:  10.719762261306766\n"
     ]
    }
   ],
   "source": [
    "from sklearn.multioutput import MultiOutputRegressor\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "X, y = X_train, Y_train\n",
    "start_time = datetime.now()\n",
    "model = MultiOutputRegressor(Ridge(random_state=2022)).fit(X, y)\n",
    "pred = model.predict(X_test)\n",
    "runtime = datetime.now() - start_time\n",
    "mse = mean_squared_error(pred, Y_test).item()\n",
    "\n",
    "print('Runtime: ', runtime.microseconds)\n",
    "print('MSE loss: ', mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Runtime::  242429\n",
      "MSE loss:  7.0959381386117375\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = GP_Regression_SOR(K=SigmoidKernel(alpha=0.05), sigma_n=1, device=device, B=0.1)\n",
    "start_time = datetime.now()\n",
    "model.fit(X_train, Y_train, X_test)\n",
    "pred = model.predict()\n",
    "runtime = datetime.now() - start_time\n",
    "mse = nn.MSELoss()(pred, Y_test).item()\n",
    "\n",
    "print('Runtime:: ', runtime.microseconds)\n",
    "print('MSE loss: ', mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "2f37873089bc99999a4c22445a6971dc9322bb05dc63dba22dd50e8a2bf7bc1c"
  },
  "kernelspec": {
   "display_name": "Python 3.8.12 ('AML')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
